require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe JobPostingsController, type: :controller do
  include Devise::Test::ControllerHelpers

  let(:company1) { FactoryGirl.create(:company) }
  let(:company2) { FactoryGirl.create(:company) }
  let(:company3) { FactoryGirl.create(:company) }
  let(:user) { FactoryGirl.create(:user, last_company_context: company1) }

  let(:valid_attributes) { skip 'valid attributes' }
  let(:invalid_attributes) { skip 'invalid attributes' }

  before :each do
    user.companies << company1
    user.companies << company2
    sign_in user
  end

  describe 'GET #index' do
    it 'returns a success response' do
      JobPosting.create! valid_attributes
      get :index, params: {}
      expect(response).to be_success
    end

    it 'does not include jobs that do not belong to current company' do
      job1 = FactoryGirl.create(:job_posting, company: company1)
      job2 = FactoryGirl.create(:job_posting, company: company1)
      job3 = FactoryGirl.create(:job_posting, company: company2)
      job4 = FactoryGirl.create(:job_posting, company: company2)

      get :index, params: {}

      expect(assigns(:job_postings)).to include(job1)
      expect(assigns(:job_postings)).to include(job2)
      expect(assigns(:job_postings)).not_to include(job3)
      expect(assigns(:job_postings)).not_to include(job4)
    end
  end

  describe 'GET #show' do
    it 'returns a success response' do
      job_posting = JobPosting.create! valid_attributes
      get :show, params: { id: job_posting.to_param }
      expect(response).to be_success
    end
  end

  describe 'GET #new' do
    it 'returns a success response' do
      get :new, params: {}
      expect(response).to have_http_status(:success)
    end
  end

  describe 'GET #edit' do
    it 'returns a success response' do
      job_posting = JobPosting.create! valid_attributes
      get :edit, params: { id: job_posting.to_param }
      expect(response).to be_success
    end

    context 'job belongs to company that user has no access to' do
      it 'redirects to home page' do
        job_posting = FactoryGirl.create(:job_posting, company: company3, publication_status: 'PUBLISHED')
        get :edit, params: { id: job_posting.to_param }
        expect(response).to redirect_to(root_path)
      end
    end
  end

  describe 'POST #create' do
    context 'with valid params' do
      it 'creates a new JobPosting' do
        expect do
          post :create, params: { job_posting: valid_attributes }
        end.to change(JobPosting, :count).by(1)
      end

      it 'redirects to the created job_posting' do
        post :create, params: { job_posting: valid_attributes }
        expect(response).to redirect_to(JobPosting.last)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'new' template)" do
        post :create, params: { job_posting: invalid_attributes }
        expect(response).to be_success
      end
    end
  end

  describe 'PUT #update' do
    context 'with valid params' do
      let(:new_attributes) do
        skip('Add a hash of attributes valid for your model')
      end

      it 'updates the requested job_posting' do
        job_posting = JobPosting.create! valid_attributes
        put :update, params: { id: job_posting.to_param, job_posting: new_attributes }
        job_posting.reload
        skip('Add assertions for updated state')
      end

      it 'redirects to the job_posting' do
        job_posting = JobPosting.create! valid_attributes
        put :update, params: { id: job_posting.to_param, job_posting: valid_attributes }
        expect(response).to redirect_to(job_posting)
      end
    end

    context 'with invalid params' do
      it "returns a success response (i.e. to display the 'edit' template)" do
        job_posting = JobPosting.create! valid_attributes
        put :update, params: { id: job_posting.to_param, job_posting: invalid_attributes }
        expect(response).to be_success
      end
    end
  end

  describe 'DELETE #destroy' do
    it 'destroys the requested job_posting' do
      job_posting = JobPosting.create! valid_attributes
      expect do
        delete :destroy, params: { id: job_posting.to_param }
      end.to change(JobPosting, :count).by(-1)
    end

    it 'redirects to the job_postings list' do
      job_posting = JobPosting.create! valid_attributes
      delete :destroy, params: { id: job_posting.to_param }
      expect(response).to redirect_to(job_postings_url)
    end
  end

  describe 'POST #publish_job' do
    let(:closed_job_reason) { FactoryGirl.create(:closed_job_reason) }
    let(:job_posting) do
      FactoryGirl.create(:job_posting,
                         publication_status: 'CLOSED',
                         company_id: company1.id,
                         closed_job_reason_id: closed_job_reason.id)
    end

    before :each do
      sign_in user
      post :publish_job, params: { id: job_posting.id } #
      job_posting.reload
    end

    it 'changes job status to PUBLISHED and closed_job_reason_id to nil' do
      expect(job_posting.publication_status).to eq('PUBLISHED')
      expect(job_posting.closed_job_reason_id).to be_nil
    end

    it 'redirects to view job posting' do
      expect(response).to redirect_to(job_posting_path(job_posting.id))
    end
  end
end
